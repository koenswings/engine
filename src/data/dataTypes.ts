import { Doc } from 'yjs'
import { WebsocketProvider } from '../yjs/y-websocket.js'

// TODOS
// 1. Backup Disks


// ChatGPT Instructions
// We need a TypeScript data model
// We have a collection of App Instances which are instances of Apps
// Each App Instance has the following properties:
// - the name of the App it is an instance of
// - the version of the App it is an instance of
// - the category of the App it is an instance of (e.g. "Productivity", "Utilities", "Games")
// - the desciption of the App it is an instance of
// - the icon of the App it is an instance of
// - the name of the App Instance
// - the status of the App Instance (e.g. "Running", "Paused", "Error")
// - the Docker metrics of the App Instance (e.g. CPU, Memory, Network, Disk)
// - the Docker logs of the App Instance
// - the Docker events of the App Instance
// - the Docker configuration of the App Instance
// - the time and date the App Instance was created
// - the time and date the App Instance was last backed up
// - the time and date the App Instance was last started
// - a flag indicating that it can be upgraded
// - a flag indicating that it can be backed up
// - the Disk on which the App Instance is stored
// The Disk has the following properties:
// - the name of the Disk
// - the time and date the Disk was created
// - the time and date the Disk was last docked
// - a flag indicating that it can be removed
// - a flag indicating that it can be upgraded
// - the Engine on which the Disk is stored
// The Engine has the following properties:
// - the hostName of the Engine
// - the version of the Engine
// - the host OS it is running on (e.g. "Raspberri Pi OS version 2023-05-12")
// - the status of the Engine (e.g. "Running", "Paused", "Error")
// - the Docker metrics of the Engine (e.g. CPU, Memory, Network, Disk)
// - the Docker logs of the Engine
// - the Docker events of the Engine
// - the time and date the Engine was last booted
// That's it. We need to define the TypeScript data model for this.


// **********
// Generated by Github Copilot
// **********

// 


// **********
// Generated by ChatGPT 4.0
// **********

type AppCategory = 'Productivity' | 'Utilities' | 'Games';

export type Status = 'Running' | 'Paused' | 'Error';

type DiskType = 'Apps' | 'Backup';


type URL = string;

export interface Version {
  major: number;
  minor: number;
}


export interface AppMaster {
  name: string;
  version: Version;
  category: AppCategory;
  description: string;
  icon: URL;
}

export interface DockerMetrics {
  cpu: string;
  memory: string;
  network: string;
  disk: string;
}

export interface DockerLogs {
  logs: string[]; // Assuming logs are strings, but this could be more complex
}

export interface DockerEvents {
  events: string[]; // Similarly, assuming simple string descriptions
}

// interface DockerConfiguration {
//   // Define the structure according to the Docker configuration specifics
//   [key: string]: any; // Placeholder, adjust as needed
// }

export interface Disk {
  name: string;
  type: DiskType;
  created: Date;
  lastDocked: Date;
  removable: boolean;
  upgradable: boolean;
  //engine: Engine;   
  apps: App[];     
}

export interface Engine {
  hostName: string;
  version: Version;
  hostOS: string;
  status: Status;
  dockerMetrics: DockerMetrics;
  dockerLogs: DockerLogs;
  dockerEvents: DockerEvents;
  lastBooted: number; // We must use a timestamp number as Date objects are not supported in YJS
  disks: Disk[],
 }

export interface App {
  instanceOf: AppMaster;
  name: string;
  status: Status;
  dockerMetrics: DockerMetrics;
  dockerLogs: DockerLogs;
  dockerEvents: DockerEvents;
  created: Date;
  lastBackedUp: Date;
  lastStarted: Date;
  upgradable: boolean;
  backUpEnabled: boolean;
  //disk: Disk;
}

// type NetworkID = string;

// export interface NetworkInterface {
//   network: NetworkID;  // Reference by id since we do not want to expose Yjs details to the proxy
//   iface: string
//   ip4: string;
//   netmask: string;
// }

// The root level Network object which is NOT proxied  
export interface Network {
  id: string;
  iface: string
  ip4: string;
  netmask: string;
  doc: Doc;
  wsProvider: WebsocketProvider;
  data: NetworkData; // The Valtio proxy object
}

// export interface NetworkData {
//   engines: Engine[] 
//   //disks: Disk[];
//   //apps: App[];
// }
// HACK - 
export interface NetworkData {
  [key: string]: any;
}


